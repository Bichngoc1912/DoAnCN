{"version":3,"sources":["Component/Navigation/index.js","action/category.js","Layout/index.js","Container/About/index.js","Container/Dashboard/index.js","Container/Contact/index.js","router.js","App.js","serviceWorker.js","reducer/category.js","reducer/index.js","index.js"],"names":["Navgation","props","dispatch","useDispatch","listcategory","useSelector","state","category","useEffect","Axios","get","then","response","type","payload","data","catch","error","className","to","Object","keys","map","val","key","slug","name","Layout","children","About","Dashboard","Contact","Router","exact","path","component","App","Component","Boolean","window","location","hostname","match","initState","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"yUAUe,SAASA,EAAUC,GAChC,IAAMC,EAAWC,cACTC,EAAiBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,YAA9CH,aAIR,OAHAI,qBAAU,WACRN,GCDO,SAACA,GACJ,OAAOO,IAAMC,IAXT,wDAWkBC,MAAK,SAAAC,GACvBV,EATD,CACHW,KANsB,iBAOtBC,QAO2BF,EAASG,UAEnCC,OAAM,SAAAC,GACH,MAAMA,UDHb,IAED,yBAAKC,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,QACrB,2CAMV,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,YACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,KAAT,mBAEDf,GACCgB,OAAOC,KAAKjB,GAAckB,KAAI,SAACC,EAAKC,GAAN,OAC5B,wBAAIN,UAAU,WAAWM,IAAKA,GAC5B,kBAAC,IAAD,CAAML,GAAE,UAAKf,EAAamB,GAAKE,OAC5BrB,EAAamB,GAAKG,iBEhC9BC,MARf,YAA8B,IAAZC,EAAW,EAAXA,SACd,OACG,6BACI,kBAAC,EAAD,MACCA,ICLG,SAASC,IACpB,OACI,sCCDO,SAASC,IACpB,OACI,+CCHO,SAASC,IACpB,OACI,wCCYOC,MATf,WACI,OACM,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWJ,MCMjCK,G,6KATX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,Y,GALQC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBAC,EAAY,CACdvC,aAAc,IAaHG,EAVE,WAAgC,IAA/BD,EAA8B,uDAAtBqC,EAAWC,EAAW,uCAC5C,OAAQA,EAAO/B,MACX,IRPsB,iBQQlB,MAAO,CACHT,aAAcwC,EAAO9B,SAE7B,QAAS,OAAOR,ICTTuC,cAAgB,CAC3BtC,aCMEuC,EAAQC,YAAYC,EAAaC,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SHmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.b8a97eff.chunk.js","sourcesContent":["import React, { Component, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { fetchAllCategory } from \"../../action/category\";\r\nconst renderChildrenNavigation = () => {\r\n    return {\r\n        \r\n    }\r\n}\r\nexport default function Navgation(props) {\r\n  const dispatch = useDispatch();\r\n  const { listcategory } = useSelector((state) => state.category);\r\n  useEffect(() => {\r\n    dispatch(fetchAllCategory());\r\n  }, []);\r\n  return (\r\n    <div className=\"nav-bar\">\r\n      <div className=\"header-upper\">\r\n        <div className=\"auto-container\">\r\n          <div className=\"logo-outer\">\r\n            <div className=\"logo\">\r\n              <Link to=\"/\" className=\"logo\">\r\n                <span>Logo</span>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"header-lower\">\r\n        <div className=\"auto-container\">\r\n          <div className=\"nav-outer\">\r\n            <div className=\"main-menu\">\r\n              <div className=\"navbar-collapse\">\r\n                <ul className=\"nav-menu\">\r\n                  <li className=\"Nav-item\">\r\n                    <Link to=\"/\">Trang chủ</Link>\r\n                  </li>\r\n                  {listcategory &&\r\n                    Object.keys(listcategory).map((val, key) => (\r\n                      <li className=\"Nav-item\" key={key}>\r\n                        <Link to={`${listcategory[val].slug}`}>\r\n                          {listcategory[val].name}\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Axios from 'axios';\r\nexport const FETCH_CATEGORY = \"FETCH_CATEGORY\";\r\n\r\nconst api = 'http://localhost:8080/itdlu/wp-json/wp/v2/categories';\r\n\r\nexport const fetchCategory = (payload) => {\r\n    return {\r\n        type: FETCH_CATEGORY,\r\n        payload\r\n    }\r\n};\r\n\r\nexport const fetchAllCategory = () => {\r\n    return (dispatch) => {\r\n        return Axios.get(api).then(response => {\r\n            dispatch(fetchCategory(response.data))//thay cho return\r\n        })\r\n        .catch(error => {\r\n            throw(error);\r\n        });\r\n    };\r\n};","import React from 'react';\r\nimport Navbar from '../Component/Navigation';\r\nfunction Layout ({children}) {\r\n    return (\r\n       <div>\r\n           <Navbar/>\r\n           {children}\r\n       </div>\r\n    )\r\n}\r\nexport default Layout;","import React from 'react';\r\nexport default function About(){\r\n    return (\r\n        <div>\r\n            about\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Layout from '../../Layout';\r\nexport default function Dashboard () {\r\n    return (\r\n        <div>\r\n            trang chủ\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nexport default function Contact(){\r\n    return (\r\n        <div>\r\n            Contact\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport Layout from './Layout';\r\nimport About from './Container/About';\r\nimport Dashboard from './Container/Dashboard';\r\nimport Contact from './Container/Contact';\r\nfunction Router(){\r\n    return (\r\n          <Layout>\r\n              <Route exact path=\"/\" component={Dashboard} />\r\n              <Route path=\"/About\" component={About}/>\r\n              <Route path=\"/Contact\" component={Contact} />\r\n          </Layout>\r\n    )\r\n}\r\nexport default Router;","import React,{Component} from 'react';\nimport './scss/_sess.scss';\nimport {BrowserRouter, Switch} from 'react-router-dom';\nimport Route from './router';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route/>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_CATEGORY } from '../action/category';\r\n\r\nconst initState = {\r\n    listcategory: {}\r\n}\r\n\r\nconst category = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_CATEGORY:\r\n            return {\r\n                listcategory: action.payload\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default category;","import {combineReducers} from 'redux';\r\nimport category from './category';\r\n\r\nexport default combineReducers({\r\n    category,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport {Provider} from 'react-redux';\n\nimport rootReducer from './reducer';\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}